
Write a program for the following usecase :

Need to create a custom ThreadPoolExecutor :

The custom ThreadPoolExecutor contains preconfigured number of threads in its dispatch
Threads count can be configured in properties file, which is loaded at the start of the program
Invoke multiple tasks in main method which uses the threads available in the ThreadPoolExecutor for its working
ThreadPoolExecutor will print active and available threads count whenver a job is submitted



ThreadPool.java

package com.Assignment2.ThreadPool;

import java.util.concurrent.ThreadPoolExecutor;

import static java.lang.Thread.sleep;
import java.util.concurrent.ThreadPoolExecutor;
public class ThreadPool implements Runnable{
    public  int n;
    public static ThreadPoolExecutor te;
    public ThreadPool(int n) {
        this.n = n;
    }

    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName()+" Value-->"+n);
        try {
            sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        //System.out.println(te.getActiveCount());
        System.out.println(Thread.currentThread().getName()+"\n<----Stopped--->");
    }
}


MainClass.java

package com.Assignment2.ThreadPool;

import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import static java.lang.Thread.sleep;


public class MainClass {

    public static void main(String[] args) {
        ThreadPoolExecutor executorService= (ThreadPoolExecutor) Executors.newFixedThreadPool(4);
        //ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(2,4,10);
        for(int i=0;i<10;i++){
            Runnable r=new ThreadPool(i);
            executorService.execute(r);
            try {
                sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println();
            System.out.println("Active Thread Count-->"+executorService.getActiveCount());
            System.out.println("Pool Size-->"+executorService.getPoolSize());
            System.out.println("Task Count-->"+executorService.getTaskCount());
            System.out.println();
        }
        executorService.shutdown();
        while (!executorService.isTerminated()){}
        System.out.println("\n<---All Thread Runned Sucessfully--->\n");
    }
}

